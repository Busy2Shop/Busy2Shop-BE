// src/queues/payment.queue.ts
import Queue from 'bull';
import { logger } from '../utils/logger';
import NotificationService from '../services/notification.service';
import { INotification } from '../models/notification.model';
import TransactionService from '../services/transaction.service';
import AlatPayService from '../services/payment/alatpay.service';
import { TransactionStatus } from '../models/transaction.model';

// Define job data interface
interface PaymentWebhookJobData {
    providerTransactionId: string;
    transactionId: string;
    userId: string;
}

interface PaymentExpiryCheckJobData {
    transactionId: string;
    userId: string;
}

// Create queues
export const paymentWebhookQueue = new Queue<PaymentWebhookJobData>('payment-webhook', {
    redis: process.env.REDIS_URL || 'redis://localhost:6379',
});

export const paymentExpiryCheckQueue = new Queue<PaymentExpiryCheckJobData>(
    'payment-expiry-check',
    {
        redis: process.env.REDIS_URL || 'redis://localhost:6379',
    },
);

// Process webhook jobs
paymentWebhookQueue.process(async job => {
    const { providerTransactionId, transactionId } = job.data;
    logger.info(`Processing payment webhook for transaction ${transactionId}`);

    try {
        // Get transaction status from AlatPay
        const { data: transactionStatus } =
            await AlatPayService.checkTransactionStatus(providerTransactionId);

        // Map AlatPay status to our TransactionStatus enum
        const mappedStatus = AlatPayService.mapAlatPayStatusToLocal(transactionStatus.status);

        // Update transaction status
        await TransactionService.updateTransactionStatus(transactionId, mappedStatus);

        // Send notification
        const notification: INotification = {
            id: '', // Will be generated by the database
            userId: job.data.userId,
            title: 'Payment Status Update',
            message: `Your payment has been ${mappedStatus}`,
            heading: 'Payment Update',
            read: false,
            resource: transactionId,
        };
        await NotificationService.addNotification(notification);

        return { success: true };
    } catch (error) {
        logger.error('Error processing payment webhook:', error);
        throw error;
    }
});

// Process expiry check jobs
paymentExpiryCheckQueue.process(async job => {
    const { transactionId } = job.data;
    logger.info(`Checking payment expiry for transaction ${transactionId}`);

    try {
        // Update transaction status to failed
        await TransactionService.updateTransactionStatus(transactionId, TransactionStatus.FAILED);

        // Send notification
        const notification: INotification = {
            id: '', // Will be generated by the database
            userId: job.data.userId,
            title: 'Payment Expired',
            message: 'Your payment has expired. Please try again.',
            heading: 'Payment Expired',
            read: false,
            resource: transactionId,
        };
        await NotificationService.addNotification(notification);

        return { success: true };
    } catch (error) {
        logger.error('Error checking payment expiry:', error);
        throw error;
    }
});

// Error handling
paymentWebhookQueue.on('error', (error: Error) => {
    logger.error('Payment webhook queue error:', error);
});

paymentWebhookQueue.on('failed', (job: Queue.Job<PaymentWebhookJobData>, error: Error) => {
    logger.error(`Job ${job.id} failed:`, error);
});

paymentExpiryCheckQueue.on('error', (error: Error) => {
    logger.error('Payment expiry check queue error:', error);
});

paymentExpiryCheckQueue.on('failed', (job: Queue.Job<PaymentExpiryCheckJobData>, error: Error) => {
    logger.error(`Job ${job.id} failed:`, error);
});
