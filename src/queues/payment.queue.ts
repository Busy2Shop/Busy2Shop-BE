// src/queues/payment.queue.ts
import { Queue, Worker } from 'bullmq';
import { logger } from '../utils/logger';
import NotificationService from '../services/notification.service';
import { INotification } from '../models/notification.model';
import TransactionService from '../services/transaction.service';
import AlatPayService from '../services/payment/alatpay.service';
import { TransactionStatus } from '../models/transaction.model';

// Define job data interface
interface PaymentWebhookJobData {
    providerTransactionId: string;
    transactionId: string;
    userId: string;
}

interface PaymentExpiryCheckJobData {
    transactionId: string;
    userId: string;
}

// Create queues
export const paymentWebhookQueue = new Queue<PaymentWebhookJobData>('payment-webhook', {
    connection: {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
    },
});

export const paymentExpiryCheckQueue = new Queue<PaymentExpiryCheckJobData>(
    'payment-expiry-check',
    {
        connection: {
            host: process.env.REDIS_HOST || 'localhost',
            port: parseInt(process.env.REDIS_PORT || '6379'),
        },
    },
);

// Process webhook jobs
const webhookWorker = new Worker<PaymentWebhookJobData>(
    'payment-webhook',
    async job => {
        if (job.name !== 'process-webhook') {
            throw new Error(`Unknown job name: ${job.name}`);
        }

        const { providerTransactionId, transactionId } = job.data;
        logger.info(`Processing payment webhook for transaction ${transactionId}`);

        try {
            // Get transaction status from AlatPay
            const { data: transactionStatus } =
                await AlatPayService.checkTransactionStatus(providerTransactionId);

            // Map AlatPay status to our TransactionStatus enum
            const mappedStatus = AlatPayService.mapAlatPayStatusToLocal(transactionStatus.status);

            // Update transaction status
            await TransactionService.updateTransactionStatus(transactionId, mappedStatus);

            // Send notification
            const notification: INotification = {
                id: '', // Will be generated by the database
                userId: job.data.userId,
                title: 'Payment Status Update',
                message: `Your payment has been ${mappedStatus}`,
                heading: 'Payment Update',
                read: false,
                resource: transactionId,
            };
            await NotificationService.addNotification(notification);

            return { success: true };
        } catch (error) {
            logger.error('Error processing payment webhook:', error);
            throw error;
        }
    },
    {
        connection: {
            host: process.env.REDIS_HOST || 'localhost',
            port: parseInt(process.env.REDIS_PORT || '6379'),
        },
    },
);

// Process expiry check jobs
const expiryCheckWorker = new Worker<PaymentExpiryCheckJobData>(
    'payment-expiry-check',
    async job => {
        const { transactionId } = job.data;
        logger.info(`Checking payment expiry for transaction ${transactionId}`);

        try {
            // Update transaction status to failed
            await TransactionService.updateTransactionStatus(transactionId, TransactionStatus.FAILED);

            // Send notification
            const notification: INotification = {
                id: '', // Will be generated by the database
                userId: job.data.userId,
                title: 'Payment Expired',
                message: 'Your payment has expired. Please try again.',
                heading: 'Payment Expired',
                read: false,
                resource: transactionId,
            };
            await NotificationService.addNotification(notification);

            return { success: true };
        } catch (error) {
            logger.error('Error checking payment expiry:', error);
            throw error;
        }
    },
    {
        connection: {
            host: process.env.REDIS_HOST || 'localhost',
            port: parseInt(process.env.REDIS_PORT || '6379'),
        },
    },
);

// Error handling
webhookWorker.on('error', (error: Error) => {
    logger.error('Payment webhook worker error:', error);
});

webhookWorker.on('failed', (job: any, error: Error) => {
    logger.error(`Job ${job?.id} failed:`, error);
});

expiryCheckWorker.on('error', (error: Error) => {
    logger.error('Payment expiry check worker error:', error);
});

expiryCheckWorker.on('failed', (job: any, error: Error) => {
    logger.error(`Job ${job?.id} failed:`, error);
});
