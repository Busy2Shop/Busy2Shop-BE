openapi: 3.0.0
info:
  title: Agent API
  version: 1.0.0
  description: API for managing agents and agent-related operations
  contact:
    name: API Support
    email: support@busy2shop.com
  license:
    name: proprietary
servers:
  - url: http://localhost:8000/api/v0
    description: Development server

components:
  schemas:
    AgentSettings:
      type: object
      properties:
        isBlocked:
          type: boolean
          description: Whether the agent is blocked
        isDeactivated:
          type: boolean
          description: Whether the agent account is deactivated

    Market:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the market
        name:
          type: string
          description: Name of the market
        description:
          type: string
          description: Description of the market
        ownerId:
          type: string
          format: uuid
          description: ID of the agent who owns the market

    AgentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the agent
        firstName:
          type: string
          description: Agent's first name
        lastName:
          type: string
          description: Agent's last name
        email:
          type: string
          format: email
          description: Agent's email address
        status:
          type: object
          properties:
            userType:
              type: string
              enum: [agent]
              description: Type of user
            activated:
              type: boolean
              description: Whether the account is activated
            emailVerified:
              type: boolean
              description: Whether the email is verified
        settings:
          $ref: '#/components/schemas/AgentSettings'
        ownedMarkets:
          type: array
          items:
            $ref: '#/components/schemas/Market'
          description: Markets owned by the agent
        createdAt:
          type: string
          format: date-time
          description: When the agent account was created
        updatedAt:
          type: string
          format: date-time
          description: When the agent account was last updated

    AgentStatsResponse:
      type: object
      properties:
        totalOrders:
          type: integer
          description: Total number of orders handled by the agent
        completedOrders:
          type: integer
          description: Number of orders completed by the agent
        cancelledOrders:
          type: integer
          description: Number of orders cancelled by the agent
        pendingOrders:
          type: integer
          description: Number of orders currently pending or in progress
        totalMarkets:
          type: integer
          description: Number of markets owned by the agent

    AssignOrderRequest:
      type: object
      properties:
        agentId:
          type: string
          format: uuid
          description: ID of the agent to assign the order to
      required:
        - agentId

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /agent:
    get:
      summary: Get all agents
      tags:
        - Agent
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: q
          schema:
            type: string
          description: Search query for agent name or email
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by agent active status
        - in: query
          name: lat
          schema:
            type: number
            format: float
          description: Latitude for location-based search
        - in: query
          name: lng
          schema:
            type: number
            format: float
          description: Longitude for location-based search
        - in: query
          name: distance
          schema:
            type: number
            format: float
          description: Search radius in kilometers (defaults to 5km)
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agents retrieved successfully
                  data:
                    type: object
                    properties:
                      agents:
                        type: array
                        items:
                          $ref: '#/components/schemas/AgentResponse'
                      count:
                        type: integer
                        description: Total count of agents
                      totalPages:
                        type: integer
                        description: Total number of pages

  /agent/{id}:
    get:
      summary: Get a specific agent's profile
      tags:
        - Agent
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent to retrieve
      responses:
        '200':
          description: Agent profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agent profile retrieved successfully
                  data:
                    $ref: '#/components/schemas/AgentResponse'
        '404':
          description: Agent not found

  /agent/{id}/stats:
    get:
      summary: Get statistics for an agent
      tags:
        - Agent
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent to get statistics for (uses authenticated user ID if not provided)
      responses:
        '200':
          description: Agent statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agent stats retrieved successfully
                  data:
                    $ref: '#/components/schemas/AgentStatsResponse'
        '403':
          description: Forbidden - Not authorized to view this agent's statistics
        '404':
          description: Agent not found

  /agent/available/{shoppingListId}:
    get:
      summary: Get available agents for an order
      tags:
        - Agent
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shoppingListId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the shopping list to find available agents for
      responses:
        '200':
          description: Available agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Available agents retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentResponse'
        '400':
          description: Bad request - Shopping list ID is required
        '403':
          description: Forbidden - Not authorized to view available agents
        '404':
          description: Shopping list not found

  /agent/assign/{orderId}:
    post:
      summary: Assign an order to an agent
      tags:
        - Agent
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to assign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOrderRequest'
      responses:
        '200':
          description: Order assigned to agent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order assigned to agent successfully
                  data:
                    $ref: '#/components/schemas/AgentResponse'
        '400':
          description: Bad request - Agent ID is required or order is not in pending status
        '403':
          description: Forbidden - Not authorized to assign orders
        '404':
          description: Order or agent not found