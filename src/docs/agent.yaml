openapi: 3.0.0
info:
  title: Agent API
  version: 1.0.0
  description: API for managing agents and agent-related operations
  contact:
    name: API Support
    email: support@busy2shop.com
  license:
    name: proprietary
servers:
  - url: ${protocol}://${host}/api/v0
    description: Development server

components:
  schemas:
    AgentSettings:
      type: object
      properties:
        isBlocked:
          type: boolean
          description: Whether the agent is blocked
        isDeactivated:
          type: boolean
          description: Whether the agent account is deactivated
        agentMetaData:
          type: object
          properties:
            nin:
              type: string
              description: National Identification Number
            images:
              type: array
              items:
                type: string
              description: Verification images
            currentStatus:
              type: string
              enum: [ available, busy, away, offline ]
              description: Current agent status
            lastStatusUpdate:
              type: string
              format: date-time
              description: When the status was last updated
            isAcceptingOrders:
              type: boolean
              description: Whether the agent is accepting new orders

    AgentLocation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the location
        agentId:
          type: string
          format: uuid
          description: ID of the agent this location belongs to
        latitude:
          type: number
          format: float
          description: Latitude coordinate
        longitude:
          type: number
          format: float
          description: Longitude coordinate
        radius:
          type: number
          format: float
          description: Radius in kilometers (default 5.0)
        isActive:
          type: boolean
          description: Whether this location is active
        name:
          type: string
          description: Optional name for the location
        address:
          type: string
          description: Optional address description
        createdAt:
          type: string
          format: date-time
          description: When the location was created
        updatedAt:
          type: string
          format: date-time
          description: When the location was last updated

    AgentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the agent
        firstName:
          type: string
          description: Agent's first name
        lastName:
          type: string
          description: Agent's last name
        email:
          type: string
          format: email
          description: Agent's email address
        status:
          type: object
          properties:
            userType:
              type: string
              enum: [ agent ]
              description: Type of user
            activated:
              type: boolean
              description: Whether the account is activated
            emailVerified:
              type: boolean
              description: Whether the email is verified
            availability:
              type: string
              enum: [ available, busy, away, offline ]
              description: Agent availability status
        settings:
          $ref: '#/components/schemas/AgentSettings'
        locations:
          type: array
          items:
            $ref: '#/components/schemas/AgentLocation'
          description: Agent's preferred service locations
        createdAt:
          type: string
          format: date-time
          description: When the agent account was created
        updatedAt:
          type: string
          format: date-time
          description: When the agent account was last updated

    AgentStatsResponse:
      type: object
      properties:
        totalOrders:
          type: integer
          description: Total number of orders handled by the agent
        completedOrders:
          type: integer
          description: Number of orders completed by the agent
        cancelledOrders:
          type: integer
          description: Number of orders cancelled by the agent
        pendingOrders:
          type: integer
          description: Number of orders currently pending or in progress
        uniqueMarkets:
          type: integer
          description: Number of unique markets the agent has shopped in

    AgentStatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ available, busy, away, offline ]
          description: Current agent status
        isAcceptingOrders:
          type: boolean
          description: Whether the agent is accepting new orders
        lastStatusUpdate:
          type: string
          format: date-time
          description: When the status was last updated

    AssignOrderRequest:
      type: object
      properties:
        agentId:
          type: string
          format: uuid
          description: ID of the agent to assign the order to
      required:
        - agentId

    AddLocationRequest:
      type: object
      properties:
        latitude:
          type: number
          format: float
          description: Latitude coordinate
        longitude:
          type: number
          format: float
          description: Longitude coordinate
        radius:
          type: number
          format: float
          description: Radius in kilometers (default 5.0)
        name:
          type: string
          description: Optional name for the location
        address:
          type: string
          description: Optional address description
      required:
        - latitude
        - longitude

    UpdateLocationRequest:
      type: object
      properties:
        latitude:
          type: number
          format: float
          description: Latitude coordinate
        longitude:
          type: number
          format: float
          description: Longitude coordinate
        radius:
          type: number
          format: float
          description: Radius in kilometers
        name:
          type: string
          description: Optional name for the location
        address:
          type: string
          description: Optional address description
        isActive:
          type: boolean
          description: Whether this location is active

    UpdateStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [ available, busy, away, offline ]
          description: Agent's new status
        isAcceptingOrders:
          type: boolean
          description: Whether the agent is accepting new orders
      required:
        - status

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /agent:
    get:
      summary: Get all agents
      tags:
        - Agent
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: q
          schema:
            type: string
          description: Search query for agent name or email
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by agent active status
        - in: query
          name: lat
          schema:
            type: number
            format: float
          description: Latitude for location-based search
        - in: query
          name: lng
          schema:
            type: number
            format: float
          description: Longitude for location-based search
        - in: query
          name: distance
          schema:
            type: number
            format: float
          description: Search radius in kilometers (defaults to 5km)
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agents retrieved successfully
                  data:
                    type: object
                    properties:
                      agents:
                        type: array
                        items:
                          $ref: '#/components/schemas/AgentResponse'
                      count:
                        type: integer
                        description: Total count of agents
                      totalPages:
                        type: integer
                        description: Total number of pages

  /agent/nearby:
    get:
      summary: Find nearby agents based on coordinates
      tags:
        - Agent
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: float
          description: Latitude coordinate
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: float
          description: Longitude coordinate
        - in: query
          name: maxRadius
          schema:
            type: number
            format: float
          description: Maximum radius to search in kilometers (default 20km)
      responses:
        '200':
          description: Nearby agents retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentResponse'
        '400':
          description: Bad request - latitude and longitude are required

  /agent/{id}:
    get:
      summary: Get a specific agent's profile
      tags:
        - Agent
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent to retrieve
      responses:
        '200':
          description: Agent profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agent profile retrieved successfully
                  data:
                    $ref: '#/components/schemas/AgentResponse'
        '404':
          description: Agent not found

  /agent/{id}/stats:
    get:
      summary: Get statistics for an agent
      tags:
        - Agent
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the agent to get statistics for (uses authenticated user ID if not provided)
      responses:
        '200':
          description: Agent statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agent stats retrieved successfully
                  data:
                    $ref: '#/components/schemas/AgentStatsResponse'
        '403':
          description: Forbidden - Not authorized to view this agent's statistics
        '404':
          description: Agent not found

  /agent/available/{shoppingListId}:
    get:
      summary: Get available agents for an order
      tags:
        - Agent
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: shoppingListId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the shopping list to find available agents for
      responses:
        '200':
          description: Available agents retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Available agents retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentResponse'
        '400':
          description: Bad request - Shopping list ID is required
        '403':
          description: Forbidden - Not authorized to view available agents
        '404':
          description: Shopping list not found

  /agent/assign/{orderId}:
    post:
      summary: Assigns an order to a specific agent
      description: Requires an agent ID in the request body and the order must be in 'pending' status.
      tags:
        - Agent
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to assign to an agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignOrderRequest'
      responses:
        '200':
          description: Order assigned to agent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order assigned to agent successfully
                  data:
                    type: object
                    description: The updated order
        '400':
          description: Bad request - Agent ID is required in request body or order is not in 'pending' status
        '403':
          description: Forbidden - Not authorized to assign orders
        '404':
          description: Order or agent not found

  /agent/locations:
    get:
      summary: Get all locations for the authenticated agent
      tags:
        - Agent Locations
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Locations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentLocation'
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - User is not an agent

    post:
      summary: Add a new location for the authenticated agent
      tags:
        - Agent Locations
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddLocationRequest'
      responses:
        '201':
          description: Location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentLocation'
        '400':
          description: Bad request - Invalid location data
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - User is not an agent

  /agent/locations/{id}:
    put:
      summary: Update an existing location for the authenticated agent
      tags:
        - Agent Locations
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the location to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentLocation'
        '400':
          description: Bad request - Invalid location data
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - User is not an agent or doesn't own this location
        '404':
          description: Location not found

    delete:
      summary: Delete a location for the authenticated agent
      tags:
        - Agent Locations
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the location to delete
      responses:
        '204':
          description: Location deleted successfully
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - User is not an agent or doesn't own this location
        '404':
          description: Location not found

  /agent/status:
    get:
      summary: Get the current status of the authenticated agent
      tags:
        - Agent Status
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatusResponse'
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - User is not an agent
        '404':
          description: Agent not found

    put:
      summary: Update the status of the authenticated agent
      tags:
        - Agent Status
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        '200':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
        '400':
          description: Bad request - Invalid status data
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - User is not an agent
        '404':
          description: Agent not found