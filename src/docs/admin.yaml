openapi: 3.0.0
info:
  title: 'Busy2Shop Admin API'
  version: '1.0.0'
  description: 'API documentation for Busy2Shop admin endpoints'

tags:
  - name: Admin
    description: Authentication endpoints for admin users

paths:
  /admin/login:
    post:
      tags:
        - Admin
      summary: Admin login
      description: Initiates the admin login process by sending OTP to admin email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Admin's email address
      responses:
        '200':
          description: Verification code sent to admin email
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Verification code sent to admin email

  /admin/verify:
    post:
      tags:
        - Admin
      summary: Verify admin login
      description: Verifies the OTP sent to admin email and completes login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otpCode
              properties:
                email:
                  type: string
                  format: email
                  description: Admin's email address
                otpCode:
                  type: string
                  description: One-time passcode sent to the admin's email
      responses:
        '200':
          description: Admin login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Admin login successful
                  data:
                    type: object
                    properties:
                      adminToken:
                        type: string
                        description: JWT token for admin authentication
                      admin:
                        type: object
                        properties:
                          email:
                            type: string
                            format: email
                          name:
                            type: string
                          isSuperAdmin:
                            type: boolean

  /admin/create:
    post:
      tags:
        - Admin
      summary: Create new admin
      description: Creates a new admin user (super admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  description: Admin's full name
                email:
                  type: string
                  format: email
                  description: Admin's email address
                isSuperAdmin:
                  type: boolean
                  description: Whether the new admin is a super admin
      responses:
        '201':
          description: Admin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: New admin created successfully
                  data:
                    type: object
                    description: Newly created admin information

  /admin/admins:
    get:
      tags:
        - Admin
      summary: Get all admins
      description: Retrieves a list of all admin users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
          description: Number of items per page
        - in: query
          name: q
          schema:
            type: string
          description: Search query for admin name or email
        - in: query
          name: isSuperAdmin
          schema:
            type: string
            enum: ['true', 'false']
          description: Filter by super admin status
      responses:
        '200':
          description: Admins retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Admins retrieved successfully
                  data:
                    type: object
                    properties:
                      rows:
                        type: array
                        items:
                          type: object
                          description: Admin information
                      count:
                        type: integer
                        description: Total number of admins
                      totalPages:
                        type: integer
                        description: Total number of pages

  /admin/delete:
    delete:
      tags:
        - Admin
      summary: Delete admin
      description: Deletes an admin user (super admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - adminId
              properties:
                adminId:
                  type: string
                  format: uuid
                  description: ID of admin to delete
      responses:
        '200':
          description: Admin deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Admin deleted successfully

  /admin/block-user:
    post:
      tags:
        - Admin
      summary: Block user
      description: Blocks a user from accessing the platform
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                  description: ID of user to block
                reason:
                  type: string
                  description: Reason for blocking the user
      responses:
        '200':
          description: User blocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User blocked successfully

  /admin/unblock-user:
    post:
      tags:
        - Admin
      summary: Unblock user
      description: Unblocks a previously blocked user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                  description: ID of user to unblock
                reason:
                  type: string
                  description: Reason for unblocking the user
      responses:
        '200':
          description: User unblocked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User unblocked successfully

  /admin/deactivate-user:
    post:
      tags:
        - Admin
      summary: Deactivate user
      description: Deactivates a user account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                  description: ID of user to deactivate
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deactivated successfully

  /admin/activate-user:
    post:
      tags:
        - Admin
      summary: Activate user
      description: Activates a previously deactivated user account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                  description: ID of user to activate
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User activated successfully

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Retrieves a list of all platform users with filtering options
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
          description: Number of items per page
        - in: query
          name: q
          schema:
            type: string
          description: Search query for user name or email
        - in: query
          name: isBlocked
          schema:
            type: string
            enum: ['true', 'false']
          description: Filter by blocked status
        - in: query
          name: isDeactivated
          schema:
            type: string
            enum: ['true', 'false']
          description: Filter by deactivated status
        - in: query
          name: userType
          schema:
            type: string
            enum: ['agent', 'customer']
          description: Filter by user type
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Users retrieved successfully
                  data:
                    type: object
                    properties:
                      rows:
                        type: array
                        items:
                          type: object
                          description: User information
                      count:
                        type: integer
                        description: Total number of users
                      totalPages:
                        type: integer
                        description: Total number of pages

  /admin/user/{id}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      description: Retrieves detailed information about a specific user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    type: object
                    description: Detailed user information

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT