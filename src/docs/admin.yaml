openapi: 3.0.0
info:
  title: Admin API
  description: Admin management endpoints for Busy2Shop e-commerce platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@busy2shop.com
  license:
    name: proprietary
servers:
  - url: http://localhost:8000/api/v0
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Admin:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the admin
        name:
          type: string
          description: Full name of the admin
        email:
          type: string
          format: email
          description: Email address of the admin
        adminType:
          type: string
          enum: [ superAdmin, admin, vendor ]
          description: Type of admin permissions
        supermarketId:
          type: string
          format: uuid
          nullable: true
          description: ID of the supermarket for vendor admins

    AdminLoginRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Admin email address
      example:
        email: admin@example.com

    AdminVerifyRequest:
      type: object
      required:
        - email
        - otpCode
      properties:
        email:
          type: string
          format: email
          description: Admin email address
        otpCode:
          type: string
          description: One-time verification code
      example:
        email: admin@example.com
        otpCode: "123456"

    AdminCreateRequest:
      type: object
      required:
        - name
        - email
        - adminType
      properties:
        name:
          type: string
          description: Full name of the admin
        email:
          type: string
          format: email
          description: Email address of the admin
        adminType:
          type: string
          enum: [ admin, vendor ]
          description: Type of admin permissions
        supermarketId:
          type: string
          format: uuid
          description: ID of the supermarket (required for vendor admins)
      example:
        name: John Doe
        email: john@example.com
        adminType: vendor
        supermarketId: 123e4567-e89b-12d3-a456-426614174000

    AdminDeleteRequest:
      type: object
      required:
        - adminId
      properties:
        adminId:
          type: string
          format: uuid
          description: ID of the admin to delete
      example:
        adminId: 123e4567-e89b-12d3-a456-426614174000

    UserBlockRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to block
        reason:
          type: string
          description: Reason for blocking the user
      example:
        userId: 123e4567-e89b-12d3-a456-426614174000
        reason: Violation of terms of service

    UserRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user
      example:
        userId: 123e4567-e89b-12d3-a456-426614174000

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        settings:
          type: object
          properties:
            isBlocked:
              type: boolean
            isDeactivated:
              type: boolean
            meta:
              type: object

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
        data:
          type: object
          nullable: true

    PaginatedUsers:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Users retrieved successfully
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            count:
              type: integer
            totalPages:
              type: integer

paths:
  /admin/login:
    post:
      summary: Admin login
      description: Initiates the login process by sending an OTP to the admin's email
      tags:
        - Admin Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLoginRequest'
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Verification code sent to admin email

  /admin/verify:
    post:
      summary: Verify admin login
      description: Verifies the OTP and completes the login process
      tags:
        - Admin Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminVerifyRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Admin login successful
                  data:
                    type: object
                    properties:
                      adminToken:
                        type: string
                      admin:
                        $ref: '#/components/schemas/Admin'
        '400':
          description: Invalid verification code

  /admin/create:
    post:
      summary: Create a new admin
      description: Creates a new admin with specified permissions (Super Admin only)
      tags:
        - Admin Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreateRequest'
      responses:
        '201':
          description: Admin created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: New admin created successfully
                  data:
                    $ref: '#/components/schemas/Admin'
        '400':
          description: Bad request
        '403':
          description: Forbidden - Only super admin can create new admins

  /admin/delete:
    delete:
      summary: Delete an admin
      description: Deletes an existing admin (Super Admin only)
      tags:
        - Admin Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDeleteRequest'
      responses:
        '200':
          description: Admin deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Admin deleted successfully
        '403':
          description: Forbidden - Only super admin can delete admins
        '404':
          description: Admin not found

  /admin/admins:
    get:
      summary: Get all admins
      description: Retrieves a list of all admins (Only Admin and Super Admin can use)
      tags:
        - Admin Management
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Admins retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Admins retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Admin'
        '403':
          description: Forbidden - Vendors cannot access admin list

  /admin/block-user:
    post:
      summary: Block a user
      description: Blocks a user from accessing the platform (Admin and Super Admin only)
      tags:
        - User Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBlockRequest'
      responses:
        '200':
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - User is already blocked
        '403':
          description: Forbidden - Vendors cannot manage user accounts
        '404':
          description: User not found

  /admin/unblock-user:
    post:
      summary: Unblock a user
      description: Unblocks a previously blocked user (Admin and Super Admin only)
      tags:
        - User Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBlockRequest'
      responses:
        '200':
          description: User unblocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - User is not blocked
        '403':
          description: Forbidden - Vendors cannot manage user accounts
        '404':
          description: User not found

  /admin/deactivate-user:
    post:
      summary: Deactivate a user
      description: Deactivates a user account (Admin and Super Admin only)
      tags:
        - User Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - User is already deactivated
        '403':
          description: Forbidden - Vendors cannot manage user accounts
        '404':
          description: User not found

  /admin/activate-user:
    post:
      summary: Activate a user
      description: Activates a previously deactivated user account (Admin and Super Admin only)
      tags:
        - User Management
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request - User is already activated
        '403':
          description: Forbidden - Vendors cannot manage user accounts
        '404':
          description: User not found

  /admin/users:
    get:
      summary: Get all users
      description: Retrieves a paginated list of all users with optional filters (Admin and Super Admin only)
      tags:
        - User Management
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
          description: Items per page
        - in: query
          name: q
          schema:
            type: string
          description: Search query for username or email
        - in: query
          name: isBlocked
          schema:
            type: boolean
          description: Filter blocked users
        - in: query
          name: isDeactivated
          schema:
            type: boolean
          description: Filter deactivated users
        - in: query
          name: userType
          schema:
            type: string
            enum: [ agent, customer ]
          description: Filter by user type
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
        '403':
          description: Forbidden - Vendors cannot manage user accounts

  /admin/user/{id}:
    get:
      summary: Get a user by ID
      description: Retrieves a specific user by their ID (Admin and Super Admin only)
      tags:
        - User Management
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Vendors cannot manage user accounts
        '404':
          description: User not found