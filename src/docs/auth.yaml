openapi: 3.0.0
info:
  title: 'Busy2Shop Authentication API'
  version: '1.0.0'
  description: 'API documentation for Busy2Shop authentication endpoints'

tags:
  - name: Authentication
    description: Authentication endpoints for user registration, login, and account management

paths:
  /auth/customer/signup:
    post:
      tags:
        - Authentication
      summary: Register a new customer account
      description: Creates a new customer account and sends verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '201':
          description: Customer registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email verification code sent successfully
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      userExists:
                        type: boolean
                        example: false
                      isActivated:
                        type: boolean
                        example: false
                      action:
                        type: string
                        example: verify_email

  /auth/agent/signup:
    post:
      tags:
        - Authentication
      summary: Register a new agent account
      description: Creates a new agent account and sends verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
      responses:
        '201':
          description: Agent registration initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email verification code sent successfully
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      userExists:
                        type: boolean
                        example: false
                      isActivated:
                        type: boolean
                        example: false
                      action:
                        type: string
                        example: verify_email

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email with OTP code
      description: Verifies user's email address using the OTP code sent to their email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otpCode
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                otpCode:
                  type: string
                  description: One-time passcode sent to the user's email
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email verified successfully
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      accessToken:
                        type: string
                        description: Setup token for completing account

  /auth/resend-verification:
    post:
      tags:
        - Authentication
      summary: Resend verification email
      description: Resends the verification code to the user's email
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          required: true
          description: User's email address
      responses:
        '200':
          description: Verification email resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email verification code resent successfully
                  data:
                    type: null

  /auth/complete-account:
    post:
      tags:
        - Authentication
      summary: Complete account setup
      description: Completes the user registration with personal information and creates password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - password
              properties:
                firstName:
                  type: string
                  description: User's first name
                lastName:
                  type: string
                  description: User's last name
                otherName:
                  type: string
                  description: User's middle or other names (optional)
                displayImage:
                  type: string
                  description: URL to user's profile picture (optional)
                dob:
                  type: string
                  format: date
                  description: User's date of birth (YYYY-MM-DD)
                gender:
                  type: string
                  enum: [male, female, other, prefer_not_to_say]
                  description: User's gender
                location:
                  type: object
                  properties:
                    country:
                      type: string
                      description: User's country
                    city:
                      type: string
                      description: User's city
                    address:
                      type: string
                      description: User's address
                phone:
                  type: object
                  properties:
                    countryCode:
                      type: string
                      description: Phone country code (e.g., +234)
                    number:
                      type: string
                      description: Phone number without country code
                password:
                  type: string
                  format: password
                  description: User's password (must meet complexity requirements)
      responses:
        '200':
          description: Account completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Account completed successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        description: User profile information
                      accessToken:
                        type: string
                        description: JWT access token for authenticated requests
                      refreshToken:
                        type: string
                        description: JWT refresh token for obtaining new access tokens

  /auth/customer/login:
    post:
      tags:
        - Authentication
      summary: Customer login
      description: Authenticates a customer user with email/phone and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address (either email or phone required)
                phone:
                  type: object
                  properties:
                    countryCode:
                      type: string
                      description: Phone country code (e.g., +234)
                    number:
                      type: string
                      description: Phone number without country code
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        description: User profile information
                      accessToken:
                        type: string
                        description: JWT access token for authenticated requests
                      refreshToken:
                        type: string
                        description: JWT refresh token for obtaining new access tokens

  /auth/agent/login:
    post:
      tags:
        - Authentication
      summary: Agent login
      description: Authenticates an agent user with email/phone and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address (either email or phone required)
                phone:
                  type: object
                  properties:
                    countryCode:
                      type: string
                      description: Phone country code (e.g., +234)
                    number:
                      type: string
                      description: Phone number without country code
                password:
                  type: string
                  format: password
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        description: User profile information
                      accessToken:
                        type: string
                        description: JWT access token for authenticated requests
                      refreshToken:
                        type: string
                        description: JWT refresh token for obtaining new access tokens

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidates the user's access and refresh tokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logout successful
                  data:
                    type: null

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Sends a password reset link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                redirectUrl:
                  type: string
                  format: uri
                  description: URL to redirect after password reset (optional)
      responses:
        '200':
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Reset password instructions sent successfully
                  data:
                    type: null

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Resets the user's password using the reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resetToken
                - email
                - newPassword
              properties:
                resetToken:
                  type: string
                  description: Password reset token from email
                email:
                  type: string
                  format: email
                  description: User's email address
                newPassword:
                  type: string
                  format: password
                  description: New password (must meet complexity requirements)
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password reset successfully. Please login with your new password
                  data:
                    type: null

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Changes the user's password (requires authentication)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                  description: Current password
                newPassword:
                  type: string
                  format: password
                  description: New password (must meet complexity requirements)
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Password changed successfully
                  data:
                    type: null

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user data
      description: Returns the authenticated user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User data retrieved successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        description: User profile information
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Updates the authenticated user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: User's first name
                lastName:
                  type: string
                  description: User's last name
                otherName:
                  type: string
                  description: User's middle or other names
                displayImage:
                  type: string
                  description: URL to user's profile picture
                gender:
                  type: string
                  enum: [male, female, other, prefer_not_to_say]
                  description: User's gender
                location:
                  type: object
                  properties:
                    country:
                      type: string
                      description: User's country
                    city:
                      type: string
                      description: User's city
                    address:
                      type: string
                      description: User's address
                isDeactivated:
                  type: string
                  enum: ['true', 'false']
                  description: Account deactivation status
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    type: object
                    description: Updated user profile information

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Callback endpoint for Google OAuth authentication
      security:
        - BearerAuth: []
      responses:
        '302':
          description: Redirect to frontend with tokens
          headers:
            Location:
              schema:
                type: string
              description: Redirect URL with tokens

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT