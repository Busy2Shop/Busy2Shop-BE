openapi: 3.0.0
info:
  title: Order API
  version: 1.0.0
  description: API for managing customer orders
  contact:
    name: API Support
    email: support@busy2shop.com
  license:
    name: proprietary
servers:
  - url: ${protocol}://${host}/api/v0
    description: Development server

components:
  schemas:
    DeliveryAddress:
      type: object
      properties:
        latitude:
          type: number
          format: float
          description: Latitude coordinate of the delivery location
        longitude:
          type: number
          format: float
          description: Longitude coordinate of the delivery location
        address:
          type: string
          description: Delivery street address
        city:
          type: string
          description: City for delivery
        state:
          type: string
          description: State/province for delivery
        country:
          type: string
          description: Country for delivery
        additionalDirections:
          type: string
          description: Additional directions for the delivery person
      required:
        - latitude
        - longitude
        - address
        - city
        - state
        - country

    CreateOrderRequest:
      type: object
      properties:
        shoppingListId:
          type: string
          format: uuid
          description: ID of the shopping list to create an order from
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddress'
        customerNotes:
          type: string
          description: Additional notes from the customer
      required:
        - shoppingListId
        - deliveryAddress

    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
        status:
          type: string
          enum: [ pending, accepted, in_progress, shopping, shopping_completed, delivery, completed, cancelled ]
          description: Current status of the order
        totalAmount:
          type: number
          format: float
          description: Total amount for the order
        serviceFee:
          type: number
          format: float
          description: Service fee charged
        deliveryFee:
          type: number
          format: float
          description: Delivery fee charged
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddress'
        customerNotes:
          type: string
          description: Notes from the customer
        agentNotes:
          type: string
          description: Notes from the agent
        acceptedAt:
          type: string
          format: date-time
          description: When the order was accepted by a agent
        shoppingStartedAt:
          type: string
          format: date-time
          description: When shopping started
        shoppingCompletedAt:
          type: string
          format: date-time
          description: When shopping was completed
        deliveryStartedAt:
          type: string
          format: date-time
          description: When delivery started
        completedAt:
          type: string
          format: date-time
          description: When the order was completed
        cancelledAt:
          type: string
          format: date-time
          description: When the order was cancelled
        customerId:
          type: string
          format: uuid
          description: ID of the customer who placed the order
        agentId:
          type: string
          format: uuid
          description: ID of the agent assigned to the order
        shoppingListId:
          type: string
          format: uuid
          description: ID of the shopping list this order is based on
        rejectedAgents:
          type: array
          items:
            type: object
            properties:
              agentId:
                type: string
                format: uuid
              reason:
                type: string
              rejectedAt:
                type: string
                format: date-time
          description: List of agents who rejected this order
        createdAt:
          type: string
          format: date-time
          description: When the order was created
        updatedAt:
          type: string
          format: date-time
          description: When the order was last updated

    UpdateOrderStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: [ pending, accepted, in_progress, shopping, shopping_completed, delivery, completed, cancelled ]
          description: New status for the order
      required:
        - status

    OrderNotesRequest:
      type: object
      properties:
        notes:
          type: string
          description: Notes to add to the order
      required:
        - notes

    RejectOrderRequest:
      type: object
      properties:
        reason:
          type: string
          description: Reason for rejecting the order
      required:
        - reason

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /order:
    post:
      summary: Create a new order from a shopping list
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order created successfully
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request
        '403':
          description: Forbidden - Not authorized to create orders from this shopping list
    get:
      summary: Get all orders for the authenticated user
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: status
          schema:
            type: string
            enum: [ pending, accepted, in_progress, shopping, shopping_completed, delivery, completed, cancelled ]
          description: Filter orders by status
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter orders created on or after this date (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter orders created on or before this date (YYYY-MM-DD)
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Orders retrieved successfully
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderResponse'
                      count:
                        type: integer
                        description: Total count of orders
                      totalPages:
                        type: integer
                        description: Total number of pages

  /order/agent:
    get:
      summary: Get all orders assigned to the authenticated agent
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination
        - in: query
          name: size
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: status
          schema:
            type: string
            enum: [ pending, accepted, in_progress, shopping, shopping_completed, delivery, completed, cancelled ]
          description: Filter orders by status
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter orders created on or after this date (YYYY-MM-DD)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter orders created on or before this date (YYYY-MM-DD)
      responses:
        '200':
          description: Agent orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Agent orders retrieved successfully
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderResponse'
                      count:
                        type: integer
                        description: Total count of orders
                      totalPages:
                        type: integer
                        description: Total number of pages
        '403':
          description: Forbidden - Only agents can access their assigned orders

  /order/{id}:
    get:
      summary: Get a specific order by ID
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to retrieve
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order retrieved successfully
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found

  /order/{id}/status:
    patch:
      summary: Update an order's status
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order status updated successfully
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request - Invalid status transition
        '403':
          description: Forbidden - Not authorized to update this order's status
        '404':
          description: Order not found

  /order/{id}/notes:
    patch:
      summary: Add notes to an order (for both agents and customers)
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to add notes to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderNotesRequest'
      responses:
        '200':
          description: Notes added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Notes added successfully
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request - Notes are required
        '403':
          description: Forbidden - Not authorized to add notes to this order
        '404':
          description: Order not found

  /order/{id}/reject:
    post:
      summary: Reject an order (agent only)
      tags:
        - Order
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the order to reject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectOrderRequest'
      responses:
        '200':
          description: Order rejection processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Order rejection processed successfully
                  data:
                    $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Bad request - Reason for rejection is required or Maximum number of agent rejections reached
        '403':
          description: Forbidden - Only agents can reject orders or You are not assigned to this order
        '404':
          description: Order not found